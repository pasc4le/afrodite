#!/usr/bin/env python3

from argh import *
import os
import cv2
import numpy as np
import json
import colorgram
from colour import Color
from shutil import copyfile
from PIL import Image, ImageEnhance


def isbright(imagePath, dim=10, thresh=0.5):
    # Load image from given path
    image = cv2.imread(imagePath)
    # Resize image to 10x10
    image = cv2.resize(image, (dim, dim))
    # Convert color space to LAB format and extract L channel
    L, A, B = cv2.split(cv2.cvtColor(image, cv2.COLOR_BGR2LAB))
    # Normalize L channel by dividing all pixel values with maximum pixel value
    L = L/np.max(L)
    # Return True if mean is greater than thresh else False
    return np.mean(L) > thresh


def changebrightness(imagePath, factor: int = 1):
    image = Image.open(imagePath)
    enhancer = ImageEnhance.Brightness(image)
    return enhancer.enhance(factor)


def loadImage(imagePath):
    return Image.open(imagePath)


def generatepalette(path, reverse: bool = False, accuracy=10):
    paletteraw = colorgram.extract(path, accuracy)
    paletteraw.sort(key=lambda c: c.hsl.l)
    palette = [Color(rgb=(c.rgb[0]/255, c.rgb[1]/255, c.rgb[2]/255))
               for c in paletteraw]

    return dict({
        'raw': paletteraw,
        'all': palette
    })


def palettesum(palette, reverse: bool = False):
    if reverse:
        if palette[len(palette) - 1].get_luminance() < 0.97:
            print('yep')
            print(palette[len(palette) - 1].hex)
            palette[len(palette) - 1].set_luminance(0.97)

        if palette[0].get_luminance() > 0.3:
            palette[0].set_luminance(0.3)

        tmp = palette[len(palette) - 1]
        palette[len(palette) - 1] = palette[len(palette) - 2]
        palette[len(palette) - 2] = tmp

        tmp = palette[0]
        palette[0] = palette[1]
        palette[1] = tmp

        palette = palette[::-1]
    else:
        if palette[1].get_luminance() > 0.1:
            palette[1].set_luminance(0.1)

        if palette[len(palette) - 1].get_luminance() < 0.78:
            palette[len(palette) - 1].set_luminance(0.8)

    palettesum = {
        'primary': palette[(len(palette) - 1) // 2].hex,
        'background': palette[1].hex,
        'foreground': palette[len(palette) - 1].hex,
        'high': palette[0].hex,
        'accent': palette[2].hex
    }

    return palettesum


def setbackground(path: 'path to the background image',
                  darkfolder: 'where to save the dark version of your bg' = os.path.expanduser(
                      '~/.config/dark-mode.d'),
                  lightfolder: 'set where to save the light version of your bg' = os.path.expanduser(
                      '~/.config/light-mode.d'),
                  setcommand: 'specify which command to use to set the background, use {path} as placeholder' = "nitrogen --set-zoom-fill --save {path}",
                  dumppalette: 'print generated palette' = False,
                  altwp: 'do not automatically make the alternative version of the wallpaper' = False,
                  darkwp: 'path of the dark wallpaper' = "",
                  lightwp: 'path of the light wallpaper' = "",
                  nS: 'don''t set the wallpaper' = False,
                  gD: 'generate palette for the dark version' = False):
    completepath, ext = os.path.splitext(path)

    if altwp:
        assert darkwp != "" and lightwp != ""

    if not os.path.exists(darkfolder):
        print(' [*] Creating dark-theme folder at ' + darkfolder)
        os.makedirs(darkfolder)
    if not os.path.exists(lightfolder):
        print(' [*] Creating light-theme folder at ' + lightfolder)
        os.makedirs(lightfolder)

    darkpath = os.path.join(darkfolder, 'dark.png')
    lightpath = os.path.join(lightfolder, 'light.png')

    if altwp:
        print(' [*] Copying images to predefined paths')
        loadImage(darkwp).save(darkpath)
        loadImage(lightwp).save(lightpath)
    elif isbright(path):
        print(' [*] The image selected is bright')
        print(' [*] Creating a darker version of it')
        changebrightness(path, 0.6).save(darkpath)
        print(' [*] Image created and saved at ' + darkpath)
        print(' [*] Copying light-mode image to ' + lightpath)
        loadImage(path).save(lightpath)

        if not nS:
            os.system(setcommand.format(path=lightpath))
        print(' [*] Chosen wallpaper has been set as current background')
    else:
        print(' [*] The image selected is dark')
        print(' [*] Creating a lighter version of it')
        changebrightness(path, 1.4).save(lightpath)
        print(' [*] Image created and saved at ' + lightpath)
        print(' [*] Copying light-mode image to ' + darkpath)
        loadImage(path).save(darkpath)

        if not nS:
            os.system(setcommand.format(path=darkpath))
        print(' [*] Chosen wallpaper has been set as current background')

    print(' [*] Generating palette from the image')
    lightpalette = generatepalette(lightpath)['all']
    darkpalette = None

    if gD:
        darkpalette = generatepalette(darkpath)['all']

    if dumppalette:
        print(' [+] Dumping palette:')
        for c in lightpalette:
            print('  [l] ' + c.hex)
        if gD:
            print('\n')
            for c in darkpalette:
                print('   [d] ' + c.hex)

    print(' [*] Saving dark-mode palette')
    with open(os.path.join(darkfolder, 'palette.json'), 'w') as file:
        if gD:
            file.write(json.dumps(palettesum(darkpalette, False)))
        else:
            file.write(json.dumps(palettesum(lightpalette, False)))

    print(' [*] Saving light-mode palette')
    with open(os.path.join(lightfolder, 'palette.json'), 'w') as file:
        file.write(json.dumps(palettesum(lightpalette, True)))


if __name__ == '__main__':
    dispatch_command(setbackground)
